###
# Boost Software License 1.0 (BSL1.0)
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by this
# license (the "Software") to use, reproduce, display, distribute, execute, and
# transmit the Software, and to prepare derivative works of the Software, and to
# permit third-parties to whom the Software is furnished to do so, all subject to
# the following:
#
# The copyright notices in the Software and this entire statement, including the
# above license grant, this restriction and the following disclaimer, must be
# included in all copies of the Software, in whole or in part, and all derivative
# works of the Software, unless such copies or derivative works are solely in the
# form of machine-executable object code generated by a source language
# processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
# THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY
# DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
###
# - Find quatlib
# Find the quatlib headers and libraries.
#
#  QUATLIB_INCLUDE_DIRS - where to find quat.h
#  QUATLIB_LIBRARIES    - List of libraries when using quatlib.
#  QUATLIB_FOUND        - True if quatlib found.
#
# Original Author:
# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>
# http://academic.cleardefinition.com
# Iowa State University HCI Graduate Program/VRAC

if(TARGET quat)
	# Look for the header file.
	find_path(QUATLIB_INCLUDE_DIR NAMES quat.h
			PATHS ${quatlib_SOURCE_DIR})

	set(QUATLIB_LIBRARY "quat")

else()
	set(QUATLIB_ROOT_DIR
		"${QUATLIB_ROOT_DIR}"
		CACHE
		PATH
		"Root directory to search for quatlib")
	if(DEFINED VRPN_ROOT_DIR AND NOT QUATLIB_ROOT_DIR)
		set(QUATLIB_ROOT_DIR "${VRPN_ROOT_DIR}")
		mark_as_advanced(QUATLIB_ROOT_DIR)
	endif()

	if("${CMAKE_SIZEOF_VOID_P}" MATCHES "8")
		set(_libsuffixes lib64 lib)
	else()
		set(_libsuffixes lib)
	endif()

	# Look for the header file.
	find_path(QUATLIB_INCLUDE_DIR
		NAMES
		quat.h
		HINTS
		"${QUATLIB_ROOT_DIR}"
		PATH_SUFFIXES
		include
			PATHS
			"C:/Program Files/quatlib/include"
		"C:/Program Files/vrpn/include"
		"./quat")

	# Look for the library.
	find_library(QUATLIB_LIBRARY
		NAMES
		quat.lib
		libquat.a
		HINTS
		"${QUATLIB_ROOT_DIR}"
		PATH_SUFFIXES
		${_libsuffixes}
			PATHS
			"C:/Program Files/quatlib/lib"
			"C:/Program Files/vrpn/lib"
			"../buildquat"
		"../buildquat/release")
endif()

# handle the QUIETLY and REQUIRED arguments and set QUATLIB_FOUND to TRUE if
# all listed variables are TRUE
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(quatlib
	DEFAULT_MSG
	QUATLIB_LIBRARY
	QUATLIB_INCLUDE_DIR)

if(QUATLIB_FOUND)
  set(QUATLIB_LIBRARIES ${QUATLIB_LIBRARY})
  if(NOT WIN32)
  	list(APPEND QUATLIB_LIBRARIES m)
  endif()
  set(QUATLIB_INCLUDE_DIRS ${QUATLIB_INCLUDE_DIR})

	mark_as_advanced(QUATLIB_ROOT_DIR)
else()
  set(QUATLIB_LIBRARIES)
  set(QUATLIB_INCLUDE_DIRS)
endif()

mark_as_advanced(QUATLIB_LIBRARY QUATLIB_INCLUDE_DIR)
